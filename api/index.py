import os
import json
import logging
from http.server import BaseHTTPRequestHandler
from dotenv import load_dotenv
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–æ–±–∫–∞ GET –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        bot_token = os.getenv('BOT_TOKEN')
        
        response = {
            "status": "running",
            "bot": "VoiceBotUA",
            "message": "–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!",
            "url": "https://t.me/VoiceToTextUA_bot",
            "token_status": "configured" if bot_token else "missing",
            "version": "1.0.0"
        }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode())
    
    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Telegram"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data.decode('utf-8'))
            
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self.handle_update(update)
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ Telegram
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"status": "ok"}).encode())
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {e}")
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"error": str(e)}).encode())
    
    def handle_update(self, update):
        """–û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram"""
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if 'message' not in update:
            return
        
        message = update['message']
        chat_id = message['chat']['id']
        message_type = message.get('chat', {}).get('type', 'private')
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏
        if 'text' in message:
            text = message['text']
            if text == '/start':
                self.send_message(chat_id, self.get_start_message())
            elif text == '/help':
                self.send_message(chat_id, self.get_help_message())
            else:
                self.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ —Ç–µ–∫—Å—Ç.")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        elif 'voice' in message:
            self.handle_voice_message(message, chat_id, message_type)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏
        elif 'audio' in message:
            self.handle_audio_message(message, chat_id, message_type)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–µ–æ
        elif 'video' in message:
            self.handle_video_message(message, chat_id, message_type)
    
    def handle_voice_message(self, message, chat_id, message_type):
        """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        voice = message['voice']
        file_id = voice['file_id']
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
        file_info = self.get_file_info(file_id)
        if not file_info:
            self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É")
            return
        
        # –°–∫–∞—á—É—î–º–æ —Ñ–∞–π–ª
        file_path = self.download_file(file_info['file_path'])
        if not file_path:
            self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ç–µ–∫—Å—Ç (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        try:
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            recognized_text = "üé§ –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n‚ö†Ô∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ Vercel.\n\n–î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∞–±–æ –Ω–∞ —ñ–Ω—à–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ."
            
            # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if message_type == 'group' or message_type == 'supergroup':
                username = message.get('from', {}).get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
                response_text = f"@{username}\n\n{recognized_text}"
            else:
                response_text = recognized_text
            
            self.send_message(chat_id, response_text)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏")
    
    def handle_audio_message(self, message, chat_id, message_type):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤"""
        self.send_message(chat_id, "üéµ –ê—É–¥—ñ–æ —Ñ–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n‚ö†Ô∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ Vercel.")
    
    def handle_video_message(self, message, chat_id, message_type):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        self.send_message(chat_id, "üé¨ –í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n‚ö†Ô∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ Vercel.")
    
    def get_file_info(self, file_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª"""
        bot_token = os.getenv('BOT_TOKEN')
        url = f"https://api.telegram.org/bot{bot_token}/getFile"
        params = {"file_id": file_id}
        
        try:
            response = requests.get(url, params=params)
            if response.status_code == 200:
                return response.json()['result']
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª: {e}")
        
        return None
    
    def download_file(self, file_path):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É"""
        bot_token = os.getenv('BOT_TOKEN')
        url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"
        
        try:
            response = requests.get(url)
            if response.status_code == 200:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –±–æ—Ç—ñ —Ç—É—Ç –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
                return "temp_file.ogg"
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        
        return None
    
    def send_message(self, chat_id, text):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        bot_token = os.getenv('BOT_TOKEN')
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        try:
            response = requests.post(url, json=data)
            if response.status_code != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {response.text}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    def get_start_message(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start"""
        return """üé§ <b>VoiceBotUA - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≥–æ–ª–æ—Å—É –≤ —Ç–µ–∫—Å—Ç</b>

<b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
2Ô∏è‚É£ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –æ–±—Ä–æ–±–∫–∏ (–º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥)
3Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

<b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –ú–æ–≤–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç: OGG, MP3, WAV

<b>–ü—Ä–æ–±–ª–µ–º–∏:</b>
‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –º–æ–≤–∞ —á—ñ—Ç–∫–∞
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —è–∫—ñ—Å—Ç—å –∞—É–¥—ñ–æ
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, —è–∫—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ

/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¥–æ–ø–æ–º–æ–≥–∞"""
    
    def get_help_message(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /help"""
        return """‚ùì <b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É</b>

<b>–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:</b>
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ê—É–¥—ñ–æ —Ñ–∞–π–ª–∏
‚Ä¢ –í—ñ–¥–µ–æ –∑ –∞—É–¥—ñ–æ

<b>–ú–æ–≤–∏:</b>
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞)

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

<b>–î–ª—è –≥—Ä—É–ø:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–∞—Ö.

<b>–ü—Ä–æ–±–ª–µ–º–∏?</b>
–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ:
‚Ä¢ –ê—É–¥—ñ–æ —á—ñ—Ç–∫–µ
‚Ä¢ –ú–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –§–∞–π–ª –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π"""

# –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def test_bot():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    bot_token = os.getenv('BOT_TOKEN')
    if bot_token:
        return f"‚úÖ –ë–æ—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–æ–∫–µ–Ω: {bot_token[:10]}..."
    else:
        return "‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

if __name__ == '__main__':
    print(test_bot()) 