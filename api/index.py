import os
import asyncio
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from pydub import AudioSegment
import requests
import tempfile
import json
from http.server import BaseHTTPRequestHandler

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class VoiceBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        
        self.recognizer = sr.Recognizer()
        self.language = 'uk-UA'  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
        self.application = None
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        welcome_message = """
üé§ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É –≤ —Ç–µ–∫—Å—Ç.

üìù –©–æ —è –≤–º—ñ—é:
‚Ä¢ –ü–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É
‚Ä¢ –û–±—Ä–æ–±–ª—è—Ç–∏ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ —Ç–∞ –≤—ñ–¥–µ–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –≥—Ä—É–ø–∞—Ö

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é –π–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç!

/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_text = """
ü§ñ –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:

üì± –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:
1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞—É–¥—ñ–æ —Ñ–∞–π–ª –∞–±–æ –≤—ñ–¥–µ–æ
2. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –æ–±—Ä–æ–±–∫–∏ (–º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥)
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

üè† –í –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö:
‚Ä¢ –ë–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

üë• –í –≥—Ä—É–ø–∞—Ö:
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ü–æ–∫–∞–∑—É—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
‚Ä¢ –ú–æ–≤–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏: OGG, MP3, WAV, MP4 (–≤—ñ–¥–µ–æ)

‚ùì –ü—Ä–æ–±–ª–µ–º–∏:
‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –º–æ–≤–∞ —á—ñ—Ç–∫–∞
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —è–∫—ñ—Å—Ç—å –∞—É–¥—ñ–æ
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, —è–∫—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ

/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        """
        await update.message.reply_text(help_text)
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≥—Ä—É–ø–∞
            chat_type = update.effective_chat.type
            is_group = chat_type in ['group', 'supergroup']
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, –∫–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏
            if is_group:
                processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            else:
                processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                voice_data = requests.get(voice_file.file_path).content
                temp_file.write(voice_data)
                temp_file_path = temp_file.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ OGG –≤ WAV
            audio = AudioSegment.from_ogg(temp_file_path)
            wav_path = temp_file_path.replace('.ogg', '.wav')
            audio.export(wav_path, format='wav')
            
            # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ –º–æ–≤—É
            with sr.AudioFile(wav_path) as source:
                audio_data = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio_data, language=self.language)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
            os.unlink(temp_file_path)
            os.unlink(wav_path)
            
            # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            user_name = update.effective_user.first_name
            if is_group:
                response_text = f"üìù **{user_name}** –∫–∞–∂–µ:\n\n{text}"
            else:
                response_text = f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n\n{text}"
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.edit_text(response_text, parse_mode='Markdown')
            
        except sr.UnknownValueError:
            error_msg = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –±—ñ–ª—å—à —á—ñ—Ç–∫–æ—é –º–æ–≤–æ—é."
            if is_group:
                await processing_msg.edit_text(error_msg)
            else:
                await processing_msg.delete()
                await update.message.reply_text(error_msg)
        
        except sr.RequestError as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {str(e)}"
            if is_group:
                await processing_msg.edit_text(error_msg)
            else:
                await processing_msg.delete()
                await update.message.reply_text(error_msg)
        
        except Exception as e:
            error_msg = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            if is_group:
                await processing_msg.edit_text(error_msg)
            else:
                await processing_msg.delete()
                await update.message.reply_text(error_msg)
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å—É: {e}")
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤"""
        try:
            chat_type = update.effective_chat.type
            is_group = chat_type in ['group', 'supergroup']
            
            if is_group:
                processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ —Ñ–∞–π–ª...")
            else:
                processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ —Ñ–∞–π–ª...")
            
            audio_file = await context.bot.get_file(update.message.audio.file_id)
            file_name = update.message.audio.file_name or "audio"
            file_ext = os.path.splitext(file_name)[1].lower()
            
            with tempfile.NamedTemporaryFile(delete=False, suffix=file_ext) as temp_file:
                audio_data = requests.get(audio_file.file_path).content
                temp_file.write(audio_data)
                temp_file_path = temp_file.name
            
            if file_ext == '.ogg':
                audio = AudioSegment.from_ogg(temp_file_path)
            elif file_ext == '.mp3':
                audio = AudioSegment.from_mp3(temp_file_path)
            else:
                audio = AudioSegment.from_file(temp_file_path)
            
            wav_path = temp_file_path.replace(file_ext, '.wav')
            audio.export(wav_path, format='wav')
            
            with sr.AudioFile(wav_path) as source:
                audio_data = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio_data, language=self.language)
            
            os.unlink(temp_file_path)
            os.unlink(wav_path)
            
            user_name = update.effective_user.first_name
            if is_group:
                response_text = f"üìù **{user_name}** –∫–∞–∂–µ:\n\n{text}"
            else:
                response_text = f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n\n{text}"
            
            await processing_msg.edit_text(response_text, parse_mode='Markdown')
            
        except Exception as e:
            error_msg = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É."
            if is_group:
                await processing_msg.edit_text(error_msg)
            else:
                await processing_msg.delete()
                await update.message.reply_text(error_msg)
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            chat_type = update.effective_chat.type
            is_group = chat_type in ['group', 'supergroup']
            
            if is_group:
                processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏—Ç—è–≥—É—é –∞—É–¥—ñ–æ...")
            else:
                processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏—Ç—è–≥—É—é –∞—É–¥—ñ–æ...")
            
            video_file = await context.bot.get_file(update.message.video.file_id)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
                video_data = requests.get(video_file.file_path).content
                temp_file.write(video_data)
                temp_file_path = temp_file.name
            
            audio_path = temp_file_path.replace('.mp4', '.wav')
            audio = AudioSegment.from_file(temp_file_path)
            audio.export(audio_path, format='wav')
            
            with sr.AudioFile(audio_path) as source:
                audio_data = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio_data, language=self.language)
            
            os.unlink(temp_file_path)
            os.unlink(audio_path)
            
            user_name = update.effective_user.first_name
            if is_group:
                response_text = f"üìù **{user_name}** –∫–∞–∂–µ —É –≤—ñ–¥–µ–æ:\n\n{text}"
            else:
                response_text = f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –≤—ñ–¥–µ–æ:\n\n{text}"
            
            await processing_msg.edit_text(response_text, parse_mode='Markdown')
            
        except Exception as e:
            error_msg = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–µ–æ –∞–±–æ –Ω–µ–º–∞—î –∞—É–¥—ñ–æ."
            if is_group:
                await processing_msg.edit_text(error_msg)
            else:
                await processing_msg.delete()
                await update.message.reply_text(error_msg)
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {e}")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        chat_type = update.effective_chat.type
        if chat_type in ['group', 'supergroup']:
            return
        
        await update.message.reply_text(
            "üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é –π–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n"
            "üí° –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏: OGG, MP3, WAV, MP4 (–≤—ñ–¥–µ–æ)"
        )
    
    async def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
        self.application = Application.builder().token(self.bot_token).build()
        
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        self.application.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_handlers()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ Vercel!")
        await self.application.run_polling(allowed_updates=Update.ALL_TYPES)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –±–æ—Ç–∞
bot = None

async def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global bot
    if bot is None:
        bot = VoiceBot()
        await bot.start_polling()

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–æ–±–∫–∞ GET –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        response = {
            "status": "running",
            "bot": "VoiceBotUA",
            "message": "–ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Vercel!",
            "url": "https://t.me/VoiceToTextUA_bot"
        }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode())
    
    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(init_bot())
            response = {"status": "success", "message": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π"}
        except Exception as e:
            response = {"status": "error", "message": str(e)}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode())

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ == '__main__':
    asyncio.run(init_bot()) 