import os
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import requests

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

class VoiceBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        
        self.application = Application.builder().token(self.bot_token).build()
        self.recognizer = sr.Recognizer()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        self.application.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("VoiceBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            await update.message.reply_text("üéµ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
            audio_data = await self.download_and_convert_audio(voice_file.file_path)
            
            if audio_data:
                # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
                text = await self.recognize_speech(audio_data)
                if text:
                    await update.message.reply_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:**\n\n{text}")
                else:
                    await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤"""
        try:
            await update.message.reply_text("üéµ –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ —Ñ–∞–π–ª...")
            
            audio_file = await context.bot.get_file(update.message.audio.file_id)
            audio_data = await self.download_and_convert_audio(audio_file.file_path)
            
            if audio_data:
                text = await self.recognize_speech(audio_data)
                if text:
                    await update.message.reply_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:**\n\n{text}")
                else:
                    await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞—É–¥—ñ–æ)"""
        try:
            await update.message.reply_text("üé¨ –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ...")
            
            video_file = await context.bot.get_file(update.message.video.file_id)
            audio_data = await self.download_and_convert_audio(video_file.file_path)
            
            if audio_data:
                text = await self.recognize_speech(audio_data)
                if text:
                    await update.message.reply_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:**\n\n{text}")
                else:
                    await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        text = update.message.text
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏.\n\n"
            f"üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞—É–¥—ñ–æ –∞–±–æ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª, "
            f"—ñ —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é –π–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n\n"
            f"üá∫üá¶ –ü—ñ–¥—Ç—Ä–∏–º—É—é —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É!"
        )
    
    async def download_and_convert_audio(self, file_path: str) -> bytes:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ –≤ WAV"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            response = requests.get(file_path)
            response.raise_for_status()
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_file.write(response.content)
                temp_file_path = temp_file.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ WAV –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pydub
            audio = AudioSegment.from_file(temp_file_path)
            
            # –ï–∫—Å–ø–æ—Ä—Ç –≤ WAV
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as wav_file:
                audio.export(wav_file.name, format='wav')
                wav_path = wav_file.name
            
            # –ß–∏—Ç–∞–Ω–Ω—è WAV —Ñ–∞–π–ª—É
            with open(wav_path, 'rb') as f:
                audio_data = f.read()
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            os.unlink(temp_file_path)
            os.unlink(wav_path)
            
            return audio_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ: {e}")
            return None
    
    async def recognize_speech(self, audio_data: bytes) -> str:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é SpeechRecognition"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è AudioData –æ–±'—î–∫—Ç–∞
            audio = sr.AudioData(audio_data, sample_rate=16000, sample_width=2)
            
            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
            text = self.recognizer.recognize_google(
                audio, 
                language='uk-UA',
                show_all=False
            )
            
            return text
            
        except sr.UnknownValueError:
            logger.warning("–ú–æ–≤–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
            return None
        except sr.RequestError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Google Speech Recognition: {e}")
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏: {e}")
            return None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
bot = VoiceBot()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application
import asyncio
asyncio.run(bot.application.initialize())

@app.route('/')
def home():
    return "ü§ñ VoiceBot –ø—Ä–∞—Ü—é—î! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram."

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ webhook –≤—ñ–¥ Telegram"""
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram
        update = Update.de_json(request.get_json(), bot.application.bot)
        
        # –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        bot.application.process_update(update)
        
        return 'OK'
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {e}")
        return 'Error', 500

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask –¥–æ–¥–∞—Ç–∫—É
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False) 