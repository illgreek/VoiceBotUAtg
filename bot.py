import os
import logging
import tempfile
import requests
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import speech_recognition as sr
from pydub import AudioSegment
import numpy as np
from ukrainian_punctuation import improve_ukrainian_text

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

class VoiceBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        
        self.application = Application.builder().token(self.bot_token).build()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SpeechRecognition
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SpeechRecognition...")
        try:
            self.recognizer = sr.Recognizer()
            logger.info("SpeechRecognition —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó SpeechRecognition: {e}")
            self.recognizer = None
        

        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        self.application.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        self.application.add_handler(MessageHandler(filters.VIDEO_NOTE, self.handle_video_note))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("VoiceBot –∑ SpeechRecognition —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            if not self.recognizer:
                await update.message.reply_text("‚ùå –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
                return
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
            user_name = update.message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            processing_msg = await update.message.reply_text(f"üéµ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_name}...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
            audio_file_path = await self.download_and_convert_audio(voice_file.file_path)
            
            if audio_file_path:
                try:
                    # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
                    text = await self.recognize_speech(audio_file_path)
                    if text:
                        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                        await processing_msg.edit_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ {user_name}:**\n\n{text}")
                    else:
                        await processing_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
                finally:
                    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ WAV —Ñ–∞–π–ª—É
                    if os.path.exists(audio_file_path):
                        os.unlink(audio_file_path)
            else:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤"""
        try:
            if not self.recognizer:
                await update.message.reply_text("‚ùå –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
                return
            
            audio_file = await context.bot.get_file(update.message.audio.file_id)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
            user_name = update.message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            processing_msg = await update.message.reply_text(f"üéµ –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ —Ñ–∞–π–ª –≤—ñ–¥ {user_name}...")
            
            audio_file_path = await self.download_and_convert_audio(audio_file.file_path)
            
            if audio_file_path:
                try:
                    text = await self.recognize_speech(audio_file_path)
                    if text:
                        await processing_msg.edit_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ {user_name}:**\n\n{text}")
                    else:
                        await processing_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
                finally:
                    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ WAV —Ñ–∞–π–ª—É
                    if os.path.exists(audio_file_path):
                        os.unlink(audio_file_path)
            else:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞—É–¥—ñ–æ)"""
        try:
            if not self.recognizer:
                await update.message.reply_text("‚ùå –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
                return
            
            video_file = await context.bot.get_file(update.message.video.file_id)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
            user_name = update.message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            processing_msg = await update.message.reply_text(f"üé¨ –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ –≤—ñ–¥ {user_name}...")
            
            audio_file_path = await self.download_and_convert_audio(video_file.file_path)
            
            if audio_file_path:
                try:
                    text = await self.recognize_speech(audio_file_path)
                    if text:
                        await processing_msg.edit_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ {user_name}:**\n\n{text}")
                    else:
                        await processing_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
                finally:
                    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ WAV —Ñ–∞–π–ª—É
                    if os.path.exists(audio_file_path):
                        os.unlink(audio_file_path)
            else:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ")
    
    async def handle_video_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∫—Ä—É–∂–µ—á–∫–∏)"""
        try:
            if not self.recognizer:
                await update.message.reply_text("‚ùå –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
                return
            
            video_note_file = await context.bot.get_file(update.message.video_note.file_id)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
            user_name = update.message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            processing_msg = await update.message.reply_text(f"üé¨ –û–±—Ä–æ–±–ª—è—é –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_name}...")
            
            audio_file_path = await self.download_and_convert_audio(video_note_file.file_path)
            
            if audio_file_path:
                try:
                    text = await self.recognize_speech(audio_file_path)
                    if text:
                        await processing_msg.edit_text(f"üìù **–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ {user_name}:**\n\n{text}")
                    else:
                        await processing_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
                finally:
                    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ WAV —Ñ–∞–π–ª—É
                    if os.path.exists(audio_file_path):
                        os.unlink(audio_file_path)
            else:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç (–Ω–µ –≥—Ä—É–ø–∞)
        if update.message.chat.type == "private":
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ (Google Speech).\n\n"
                f"üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ:\n"
                f"‚Ä¢ üéµ –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                f"‚Ä¢ üéµ –ê—É–¥—ñ–æ —Ñ–∞–π–ª\n"
                f"‚Ä¢ üé¨ –í—ñ–¥–µ–æ —Ñ–∞–π–ª\n"
                f"‚Ä¢ üé¨ –í—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫—Ä—É–∂–µ—á–æ–∫)\n\n"
                f"üá∫üá¶ –ü—ñ–¥—Ç—Ä–∏–º—É—é —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É!\n"
                f"üåê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Google Speech API"
            )
        # –í –≥—Ä—É–ø–∞—Ö –±–æ—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    async def download_and_convert_audio(self, file_path: str) -> str:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ –≤ WAV"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            response = requests.get(file_path)
            response.raise_for_status()
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_file.write(response.content)
                temp_file_path = temp_file.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ WAV –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pydub
            audio = AudioSegment.from_file(temp_file_path)
            
            # –ï–∫—Å–ø–æ—Ä—Ç –≤ WAV
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as wav_file:
                audio.export(wav_file.name, format='wav')
                wav_path = wav_file.name
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ OGG —Ñ–∞–π–ª—É
            os.unlink(temp_file_path)
            
            return wav_path
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ: {e}")
            return None
    
    async def recognize_speech(self, audio_file_path: str) -> str:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Speech API"""
        try:
            logger.info("–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ Google Speech API")
            
            # –ß–∏—Ç–∞—î–º–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª
            with sr.AudioFile(audio_file_path) as source:
                audio = self.recognizer.record(source)
            
            # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ —Ç–µ–∫—Å—Ç
            text = self.recognizer.recognize_google(
                audio, 
                language='uk-UA'  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
            )
            
            logger.info(f"Google Speech API —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —Ç–µ–∫—Å—Ç: {text}")
            
            if text and text.strip():
                # –ü–æ–∫—Ä–∞—â—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç
                text = improve_ukrainian_text(text.strip())
                return text
            else:
                logger.warning("Google Speech API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç")
                return None
                
        except sr.UnknownValueError:
            logger.warning("Google Speech API –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É")
            return None
        except sr.RequestError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Google Speech API: {e}")
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ Google Speech API: {e}")
            return None
    

    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ VoiceBot –∑ Google Speech API...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = VoiceBot()
    bot.run() 